function calc() # Simple calculator
{
	local result="";
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result";
	fi;
	printf "\n";
}

function mkd() # Create a new directory and enter it
{
	mkdir -p "$@" && cd "$_";
}


function cdf() # Change working directory to the top-most Finder window location
{ # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

function fs() # Determine size of a file or total size of a directory
{
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

function dataurl() # Create a data URL from a file
{
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

function server() # Start an HTTP server from a directory, optionally specifying the port
{
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

function gz() # Compare original and gzipped file size
{
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

function json() # Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
{
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

function digga() # Run `dig` and display the most useful info
{
	dig +nocmd "$1" any +multiline +noall +answer;
}

function escape() # UTF-8-encode a string of Unicode symbols
{
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

function unidecode() # Decode \x{ABCD}-style Unicode escape sequences
{
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

function codepoint() # Get a character’s Unicode code point
{
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

function a() # `a` with no arguments opens the current directory in Atom Editor, otherwise opens the given location
{
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

function v() # `v` with no arguments opens the current directory in Vim, otherwise opens the given location
{
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

function o() #`o` with no arguments opens the current directory, otherwise opens the given location
{
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() # `tre` is a shorthand for `tree` with hidden files and color enabled
{
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function grr() # Git: Revert changes & Remove all untracked
{
	git reset --hard;
	git clean -fd;
}

function gr() # Git: Revert changes in specific file
{
	git checkout HEAD $@;
}

function gacp() # Git: add all, commit and push. [-m "comment"]
{
	git add .;
	git commit $@
	git push
}

dcleanup() # Docker: Removes all unused containers and images
{
	docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
	docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}
